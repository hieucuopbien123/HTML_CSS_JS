# Sự phát triển của JS ở frontend

-> Đầu tiên JS được dùng trong website bằng tag <script> tới file index.js

-> Khi JS thuần k đủ, người ta phải thêm các thư viện như jQuery, lodash. 
Tải file lodash.js về và lại <script> tới nó là được. Để dùng code lodash trong index.js thì phải script tới lodash trước index.js

-> Nhưng việc quản lý version sẽ khó vì ta phải download thủ công rồi thay thế file vào và cũng phải tự nhớ version. Ta dùng bộ quản lý thư viện npm.
npm sẽ giúp tải thư viện về hộ trong node_modules đồng thời quản lý version trong file package.json, k cần làm thủ công bước này nữa.
Frontend muốn dùng thì index.html vẫn phải <script> thủ công tới lodash.js đặt trong node_modules 

-> NodeJS ra đời giúp js code được phía server và tính năng import sourcecode với server đã ra đời thông qua keyword require()
Điều này là hiển nhiên vì server luôn phải cho import code từ file này qua file khác. Các ngôn ngữ phía server khác đều có sẵn như php có include và include_once giúp import code trực tiếp từ file php này sang file php khác.
Tức ta dùng require("lodash"); kết hợp với npm tải package về node_modules sẽ tự tìm chính xác vị trí thư viện trong node_modules

Nodejs còn cung cấp cặp export/require giúp tự tạo modules, tức là require còn tìm ở các file trong thư mục gốc chứ k chỉ tìm trong node_modules. Hiểu require là chức năng của nodejs, là tính năng tất yếu phải có của server chứ klq gì đến JS.

Nhưng lúc này JS chưa có mà muốn dùng, ta buộc phải <script> tất cả trong file html trước theo thứ tự.
=> Tức là frontend lúc này vẫn chưa thể import sourcecode trực tiếp, lý do là client side k hiểu lệnh require là gì.

-> Ý tưởng là nó tạo ra 1 thư viện khiến cho JS có thể dùng được require của nodejs với chức năng tương tự, nhưng khi chạy sẽ tự tìm file gốc thế nội dung vào và loại bỏ cú pháp require (vì bản chất browser frontend vẫn k hiểu require). Gọi là modules bundler.
Dùng bundler, ta có thể require cả file css luôn vì bản chất khi chạy chỉ là thế code vào. Ta cũng có thể dùng mọi package của server ở phía client (đa số) vì bundler sẽ khiến các package của server dùng require về dạng nguyên bản client-side và browser có thể hiểu được.

Có nhiều công cụ đóng gói modules như Browserify, Webpack, Parcel, FuseBox. Trong đó webpack nổi tiếng nhất vì nó được sử dụng chung với framework React. 
VD:
Để cài webpack: npm i --save-dev webpack
Để đóng gói: ./node_modules/.bin/webpack index.js -o index_bundle.js => đóng gói index.js thành index_bundle.js. Bản chất là nó tối ưu code và require() về dạng code mà client hiểu được
- Rồi client chỉ cần dùng file index_bundle.js như file client bth: tức "client dùng package của server ở phía client được"
- Hoặc import sourcecode: client tạo file index2.js require file index.js (trực tiếp) rồi bundler luôn 2 files, file html chỉ cần <script> tới index2.js, tức "file js này có thể import sourcecode trực tiếp từ file js khác" 

Nếu muốn bundle nhiều file thì cấu hình thêm trong webpack.config.js

-> Có nhiều phiên bản JS, nhiều lúc ta cần chuyển đổi những mã JS ở bản mới về bản cũ để hỗ trợ các browser cũ hơn của người dùng. Dùng Babel: npm install --save-dev @babel/core @babel/preset-env babel-loader
Có 3 packages chính:
@babel/core: phần core của babel
@babel/preset-env: phần định nghĩa các tính năng javascript có thể chuyển đổi
babel-loader: là phần giúp ta tích hợp babel vào webpack

Vì Babel cũng là 1 thư viện, việc tích hợp vào webpack giúp đóng gói các file cần thiết và chuyển đổi về dạng dùng được ở phía browser (chuyển require về dạng browser hiểu được). 
Ta chỉ cần sửa webpack.config.js thêm babel vào là được. Nó sẽ tự chuyển đổi code js version mới về bản tương thích cũ.

-> Task runner
Ta muốn khi gõ 1 command là tự động build, đóng gói, chạy webpack, ta cũng muốn nhét tất cả file js sau khi webpack xử lý về chung 1 file index.js và tự động <script> nó trong file html chứ k cần thủ công chạy từng lệnh

Có nhiều task runner giúp làm điều này như Grunt, Gulp, thg dùng nhất là npm scripts dùng trong React. 
Ta có thể cấu hình config thủ công cho nó tự động làm các task phức tạp. Nhưng với các project có sẵn như react, nextjs nó tự config đủ để chạy mà ta k cần làm gì thêm


